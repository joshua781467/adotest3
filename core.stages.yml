pool:
    mymac
parameters:
- name: firstrun
  displayName: Import images from CTSDev registry ?
  type: boolean
  default: false
- name: solution
  displayName: Solution
  type: string
  default: fcmsaas

- name: primary
  displayName: Are you deploying a primary region?
  type: boolean
  default: false

- name: secondary
  displayName: Are you deploying a secondary region?
  type: boolean
  default: false

- name: variableGroup
  displayName: Variable Group to use
  type: string
  default: ""
  
- name: envName
  displayName: environment Name
  type: string
  default: primary

- name: dependsOn
  type: object
  default: []

- name: runTests
  displayName: Run IAAC Tests ?
  type: boolean
  default: false
stages:
- stage: DeployCore_${{ parameters.envName }}
  dependsOn: ${{parameters.dependsOn}}
  ${{ if ne(parameters.variableGroup,'' )}}:
    variables:
    - group: ${{ parameters.variableGroup }}
  displayName: 'Core Resources ${{ parameters.envName }}'
  jobs:
  - job: templates
    displayName: 'Generate the ARM templates.'
    steps:
    - template: ./arm-params-validate.yml
      parameters:
        templates:
        - templateFile: core-resources.json
          resourceGroup: $(coreResourceGroup)
        - templateFile: automation.json
          resourceGroup: $(coreResourceGroup)
        - ${{ if eq(parameters.secondary, true) }}:  
          - templateFile: acrDR.json
            resourceGroup: $(originCoreResourceGroup)
            location: $(location)
        - ${{ if eq(parameters.envName, 'primary') }}:
          - templateFile: artifact-storage.json
            resourceGroup: $(coreResourceGroup)
          - ${{ if variables.subscriptionDiagnosticsEnabled }}:
            - templateFile: diagnostics-subscription.json
              resourceGroup: $(coreResourceGroup)
        prefix: core
        outputDirectory: $(Build.StagingDirectory)/templates${{ parameters.envName }}/
        
     - deployment: core
    displayName: 'Deploy Resources'
    environment: 'Development'
    dependsOn: templates
    strategy:
      runOnce:
        deploy:
          steps:
          #This task requires the provisioning secrets to inject them at provisioning time
          - task: AzureResourceGroupDeployment@2
            displayName: "KeyVault and ACR ${{ parameters.envName }}"
            name: "kvacr${{ parameters.envName }}"
            inputs:
              azureSubscription: "Free Trial(f900333b-8d0d-40c1-a204-28e9c848d5d9)"


              resourceGroupName: $(coreResourceGroup)
              location: $(location)
              #csmFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/core-resources.json
              #csmParametersFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/core-resources.params.json
              #overrideParameters: -isDr ${{parameters.secondary}} -KeyVaultSecrets {"secrets":[{"name":"DevOpsPAT", "value":"$(DevOpsPAT)"}, {"name":"journeymanagerlicensekey", "value":"$(journeymanagerlicensekey)"}, {"name":"sftppassword", "value":"$(sftppassword)"}, {"name":"designitepassword", "value":"$(designitepassword)"}]}
              #overrideParameters: -isDr ${{parameters.secondary}} -KeyVaultSecrets {"secrets":[{"name":"designitepassword", "value":"$(designitepassword)"}, {"name":"DevOpsPAT", "value":"$(DevOpsPAT)"}, {"name":"journeymanagerlicensekey", "value":"$(journeymanagerlicensekey)"}, {"name":"paymentsdbbackupstoragesastoken", "value":"$(paymentsdbbackupstoragesastoken)"}, {"name":"transactdbbackupstoragesastoken", "value":"$(transactdbbackupstoragesastoken)"}, {"name":"transactsftppassword", "value":"$(transactsftppassword)"}]}
              deploymentName: "Core-$(Build.BuildNumber)"


