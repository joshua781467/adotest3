parameters:
- name: firstrun
  displayName: Import images from CTSDev registry ?
  type: boolean
  default: false
- name: solution
  displayName: Solution
  type: string
  default: fcmsaas

- name: primary
  displayName: Are you deploying a primary region?
  type: boolean
  default: false

- name: secondary
  displayName: Are you deploying a secondary region?
  type: boolean
  default: false

- name: variableGroup
  displayName: Variable Group to use
  type: string
  default: ""
  
- name: envName
  displayName: environment Name
  type: string
  default: primary

- name: dependsOn
  type: object
  default: []

- name: runTests
  displayName: Run IAAC Tests ?
  type: boolean
  default: false
stages:
- stage: DeployCore_${{ parameters.envName }}
  dependsOn: ${{parameters.dependsOn}}
  ${{ if ne(parameters.variableGroup,'' )}}:
    variables:
    - group: ${{ parameters.variableGroup }}
  displayName: 'Core Resources ${{ parameters.envName }}'
  jobs:
  - job: templates
    displayName: 'Generate the ARM templates.'
    steps:
    - template: ./arm-params-validate.yml
      parameters:
        templates:
        - templateFile: core-resources.json
          resourceGroup: $(coreResourceGroup)
        - templateFile: automation.json
          resourceGroup: $(coreResourceGroup)
        - ${{ if eq(parameters.secondary, true) }}:  
          - templateFile: acrDR.json
            resourceGroup: $(originCoreResourceGroup)
            location: $(location)
        - ${{ if eq(parameters.envName, 'primary') }}:
          - templateFile: artifact-storage.json
            resourceGroup: $(coreResourceGroup)
          - ${{ if variables.subscriptionDiagnosticsEnabled }}:
            - templateFile: diagnostics-subscription.json
              resourceGroup: $(coreResourceGroup)
        prefix: core
        outputDirectory: $(Build.StagingDirectory)/templates${{ parameters.envName }}/


    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'pre-provision-templates${{ parameters.envName }}'
        path: $(Build.StagingDirectory)/templates${{ parameters.envName }}/

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'pre-provision-scripts${{ parameters.envName }}'
        path: $(Build.Repository.LocalPath)/pipelines/scripts/                             

  - deployment: core
    displayName: 'Deploy Resources'
    environment: 'Development'
    dependsOn: templates
    strategy:
      runOnce:
        deploy:
          steps:
          #This task requires the provisioning secrets to inject them at provisioning time
          - task: AzureResourceGroupDeployment@2
            displayName: "KeyVault and ACR ${{ parameters.envName }}"
            name: "kvacr${{ parameters.envName }}"
            inputs:
              azureSubscription: $(AzureConnection)
              resourceGroupName: $(coreResourceGroup)
              location: $(location)
              csmFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/core-resources.json
              csmParametersFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/core-resources.params.json
              overrideParameters: -isDr ${{parameters.secondary}} -KeyVaultSecrets {"secrets":[{"name":"DevOpsPAT", "value":"$(DevOpsPAT)"}, {"name":"journeymanagerlicensekey", "value":"$(journeymanagerlicensekey)"}, {"name":"sftppassword", "value":"$(sftppassword)"}, {"name":"designitepassword", "value":"$(designitepassword)"}]}
              #overrideParameters: -isDr ${{parameters.secondary}} -KeyVaultSecrets {"secrets":[{"name":"designitepassword", "value":"$(designitepassword)"}, {"name":"DevOpsPAT", "value":"$(DevOpsPAT)"}, {"name":"journeymanagerlicensekey", "value":"$(journeymanagerlicensekey)"}, {"name":"paymentsdbbackupstoragesastoken", "value":"$(paymentsdbbackupstoragesastoken)"}, {"name":"transactdbbackupstoragesastoken", "value":"$(transactdbbackupstoragesastoken)"}, {"name":"transactsftppassword", "value":"$(transactsftppassword)"}]}
              deploymentName: "Core-$(Build.BuildNumber)"
        
          - task: AzureResourceGroupDeployment@2
            displayName: "Azure Automation Account ${{ parameters.envName }}"
            name: "automation${{ parameters.envName }}"
            inputs:
              azureSubscription: $(AzureConnection)
              resourceGroupName: $(coreResourceGroup)
              location: $(location)
              csmFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/automation.json
              csmParametersFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/automation.params.json
              overrideParameters: -ApplicationId $servicePrincipalId -ClientKey $servicePrincipalKey
              addSpnToEnvironment: true
              deploymentName: "Core-Automation-$(Build.BuildNumber)"

          - ${{ if eq(parameters.secondary, true) }}:  
            - task: AzureResourceGroupDeployment@2
              displayName: "ACR Replication"
              inputs:
                azureSubscription: $(AzureConnection)
                resourceGroupName: $(originCoreResourceGroup)
                location: $(location)
                csmFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/acrDR.json
                csmParametersFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/acrDR.params.json
                deploymentName: "Core-$(Build.BuildNumber)"

          #download the wildcard certificate to upload in KeyVault
          - task: DownloadSecureFile@1
            displayName: 'Download wildcard certificate'
            name: ussaaswildcard
            inputs:
              secureFile: 'ussaas.pfx'

          - task: AzureCLI@2
            displayName: 'Upload wildcard certificate to KeyVault'
            inputs:
              azureSubscription: $(AzureConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |  
                az keyvault certificate import --file '$(ussaaswildcard.secureFilePath)' --name 'USSaasWildcard' --vault-name $(keyVaultName)
                
          - task: AzurePowerShell@5
            displayName: Deploy disk configuration runbook to Azure Automation
            inputs:
              azureSubscription: $(AzureConnection)
              scriptPath: '$(Pipeline.Workspace)/pre-provision-scripts${{ parameters.envName }}/DeployDiskConfigurationRunbook.ps1'
              scriptArguments:
                -resourceGroupName $(coreResourceGroup) `
                -automationAccountName $(automationAccountName) `
                -scriptPath $(Pipeline.Workspace)/pre-provision-scripts${{ parameters.envName }}/ConfigureDiskAutomationRunbook.ps1 `
                -runbookName $(diskConfigurationAautomationRunbookName) `
                -KeyVaultName $(KeyVaultName)
              azurePowerShellVersion: LatestVersion
                
          - ${{ if eq(parameters.envName, 'primary') }}:                
            - ${{ if variables.subscriptionDiagnosticsEnabled }}:
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: "Diagnostic Deployment"
                inputs:
                  azureResourceManagerConnection: $(AzureConnection)
                  location: $(location)
                  deploymentScope: 'Subscription'
                  csmFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/diagnostics-subscription.json
                  csmParametersFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/diagnostics-subscription.params.json
                  deploymentName: "DiagnosticDeployment-$(Build.BuildNumber)${{ parameters.envName }}"
            - task: AzureResourceGroupDeployment@2
              displayName: "Artifact Storage Account"
              inputs:
                azureSubscription: $(AzureConnection)
                resourceGroupName: $(coreResourceGroup)
                location: $(location)
                csmFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/artifact-storage.json
                csmParametersFile: $(Pipeline.Workspace)/pre-provision-templates${{ parameters.envName }}/artifact-storage.params.json
                deploymentName: "StorageAcc-$(Build.BuildNumber)"

          - ${{ if eq(parameters.firstrun, 'true') }}:
            - task: AzureCLI@2
              displayName: Import docker images from common Distribution
              inputs:
                azureSubscription: $(AzureConnection)
                scriptType: 'ps'
                scriptLocation: 'scriptPath'
                scriptPath: '$(Pipeline.Workspace)/pre-provision-scripts${{ parameters.envName }}/TransferImages.ps1'
                arguments:
                  -destinationContainerRegistryName $(crName) `
                  -sourceContainerRegistryName $(sourcecrname) `
                  -sourceContainerRGName $(Sourcecr-rgName) `
                  -sourcesubscriptionID $(subscription) `
                  -solutionconfigpath $(Pipeline.Workspace)/pre-provision-scripts${{ parameters.envName }}/SolutionImagesConfig/${{ parameters.solution }}Images.json
  
  - ${{if eq(parameters.runTests, true)}}:
    - job: triggercoretests
      pool:
        vmImage: ubuntu-latest
      dependsOn: [core]
      displayName: "Trigger core tests"
      steps: 
      - bash: |
          mkdir -m 777 -p $(Pipeline.Workspace)/gotests
          cp -r $(Build.SourcesDirectory)/test/gotests/** $(Pipeline.Workspace)/gotests
        displayName: 'Get source code for core go tests'
        failOnStderr: false
      - template: ../templates/integrationtesting.yml
        parameters:        
          tags: core
          target: infrastructure

#During the initial provisioning, a KeyVault is created with some passwords. The KV must be 
#added to the pipeline variable group for further stages. Therfor stopping the pipeline here
  # - job:
  #   dependsOn: core
  #   condition: eq('${{ parameters.firstrun }}', 'true')
  #   displayName: 'Warning for first pipeline run'
  #   steps:
  #   - bash: |
  #       echo '##vso[task.logissue type=warning]You must now add the environement KeyVault as Pipeline Variable Group'
  #       exit 1
  #     displayName: 'You need to configure pipeline keyvault'
